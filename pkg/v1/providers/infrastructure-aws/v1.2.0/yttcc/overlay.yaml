#@ load("@ytt:overlay", "overlay")
#@ load("@ytt:data", "data")
#@ load("lib/helpers.star", "get_bom_data_for_tkr_name", "kubeadm_image_repo", "get_az_from_region")
#@ load("lib/validate.star", "validate_configuration")
#@ load("/lib/config_variable_association.star", "config_variable_association")

#@ validate_configuration("aws")

#@ bomDataForK8sVersion = get_bom_data_for_tkr_name()

#@ default_az_0 = get_az_from_region(data.values.AWS_REGION, data.values.AWS_NODE_AZ, "a")

#@ def get_k8s_version_from_tkr(tkr_version):
#@ return tkr_version.split('+')[0]
#@ end

#@ list_skip_variable_from_storing = []

#@ def getClusterVariables():
#@ vars = {}
#@ kvs = config_variable_association()
#@ for configVariable in kvs:
#@ if configVariable not in list_skip_variable_from_storing and data.values.PROVIDER_TYPE in kvs[configVariable]:
#@   vars[configVariable] =  data.values[configVariable]
#@ end
#@ end
#@ return vars
#@ end

#@overlay/match by=overlay.subset({"kind":"Cluster"})
---
apiVersion: cluster.x-k8s.io/v1beta1
kind: Cluster
metadata:
  name: #@ data.values.CLUSTER_NAME
  labels:
    #@overlay/match missing_ok=True
    #@yaml/text-templated-strings
    #@ if data.values.TKG_CLUSTER_ROLE != "workload":
    cluster-role.tkg.tanzu.vmware.com/(@= data.values.TKG_CLUSTER_ROLE @): ""
    #@ end
    tkg.tanzu.vmware.com/cluster-name: #@ data.values.CLUSTER_NAME
    #@overlay/match missing_ok=True
    tanzuKubernetesRelease: #@ data.values.KUBERNETES_RELEASE
spec:
  clusterNetwork:
    #@ if data.values.CLUSTER_API_SERVER_PORT:
    #@overlay/match missing_ok=True
    apiServerPort: #@ data.values.CLUSTER_API_SERVER_PORT
    #@ end
    pods:
      cidrBlocks:
      #@overlay/match by=overlay.index(0)
      - #@ data.values.CLUSTER_CIDR
    services:
      cidrBlocks:
      #@overlay/match by=overlay.index(0)
      - #@ data.values.SERVICE_CIDR
  topology:
    class: #@ data.values.CLUSTER_CLASS
    #! VVV TODO(vui) compute
    version: #@ data.values.KUBERNETES_VERSION
    controlPlane:
      replicas: #@ data.values.CONTROL_PLANE_MACHINE_COUNT
    workers:
      machineDeployments:
      #@overlay/match by=overlay.index(0)
      - class: tkg-worker
        name: tkg-worker-pool
        replicas: #@ data.values.WORKER_MACHINE_COUNT
    #@overlay/match missing_ok=True
    variables: 
    #@ for configVariable in getClusterVariables():
    #@  if data.values[configVariable] != None and configVariable in ["AWS_REGION" ,"AWS_SSH_KEY_NAME" ,"BASTION_HOST_ENABLED" ,"AWS_VPC_CIDR" , "AWS_VPC_ID" , "AWS_NODE_AZ" ,"AWS_PRIVATE_NODE_CIDR" ,"AWS_PRIVATE_SUBNET_ID" ,"AWS_PUBLIC_NODE_CIDR","AWS_PUBLIC_SUBNET_ID","CONTROL_PLANE_MACHINE_TYPE" ,"NODE_MACHINE_TYPE","CLUSTER_NAME","AWS_CONTROL_PLANE_OS_DISK_SIZE_GIB","AWS_NODE_OS_DISK_SIZE_GIB","AWS_SECURITY_GROUP_BASTION","AWS_SECURITY_GROUP_CONTROLPLANE","AWS_SECURITY_GROUP_APISERVER_LB","AWS_SECURITY_GROUP_NODE","AWS_SECURITY_GROUP_LB","AWS_LOAD_BALANCER_SCHEME_INTERNAL","AWS_IDENTITY_REF_KIND","AWS_IDENTITY_REF_NAME"]:
      - name: #@ configVariable
        value: #@ data.values[configVariable]
    #@ end
    #@ end
