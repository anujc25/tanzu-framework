// +build !ignore_autogenerated

// Copyright 2021 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CLIPlugin) DeepCopyInto(out *CLIPlugin) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CLIPlugin.
func (in *CLIPlugin) DeepCopy() *CLIPlugin {
	if in == nil {
		return nil
	}
	out := new(CLIPlugin)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *CLIPlugin) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CLIPluginList) DeepCopyInto(out *CLIPluginList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]CLIPlugin, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CLIPluginList.
func (in *CLIPluginList) DeepCopy() *CLIPluginList {
	if in == nil {
		return nil
	}
	out := new(CLIPluginList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *CLIPluginList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CLIPluginSpec) DeepCopyInto(out *CLIPluginSpec) {
	*out = *in
	in.Distribution.DeepCopyInto(&out.Distribution)
	in.VersionConstraints.DeepCopyInto(&out.VersionConstraints)
	if in.Platforms != nil {
		in, out := &in.Platforms, &out.Platforms
		*out = make([]Platform, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CLIPluginSpec.
func (in *CLIPluginSpec) DeepCopy() *CLIPluginSpec {
	if in == nil {
		return nil
	}
	out := new(CLIPluginSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Catalog) DeepCopyInto(out *Catalog) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	if in.PluginDescriptors != nil {
		in, out := &in.PluginDescriptors, &out.PluginDescriptors
		*out = make([]*PluginDescriptor, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(PluginDescriptor)
				(*in).DeepCopyInto(*out)
			}
		}
	}
	if in.IndexByPath != nil {
		in, out := &in.IndexByPath, &out.IndexByPath
		*out = make(map[string]PluginDescriptor, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
	if in.IndexByName != nil {
		in, out := &in.IndexByName, &out.IndexByName
		*out = make(map[string][]string, len(*in))
		for key, val := range *in {
			var outVal []string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = make([]string, len(*in))
				copy(*out, *in)
			}
			(*out)[key] = outVal
		}
	}
	if in.StandAlonePlugins != nil {
		in, out := &in.StandAlonePlugins, &out.StandAlonePlugins
		*out = make(PluginAssociation, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.ServerPlugins != nil {
		in, out := &in.ServerPlugins, &out.ServerPlugins
		*out = make(map[string]PluginAssociation, len(*in))
		for key, val := range *in {
			var outVal map[string]string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = make(PluginAssociation, len(*in))
				for key, val := range *in {
					(*out)[key] = val
				}
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Catalog.
func (in *Catalog) DeepCopy() *Catalog {
	if in == nil {
		return nil
	}
	out := new(Catalog)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Catalog) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CatalogList) DeepCopyInto(out *CatalogList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Catalog, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CatalogList.
func (in *CatalogList) DeepCopy() *CatalogList {
	if in == nil {
		return nil
	}
	out := new(CatalogList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *CatalogList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DistributionConfig) DeepCopyInto(out *DistributionConfig) {
	*out = *in
	if in.GCP != nil {
		in, out := &in.GCP, &out.GCP
		*out = new(GCPStorage)
		**out = **in
	}
	if in.OCI != nil {
		in, out := &in.OCI, &out.OCI
		*out = new(OCIRegistry)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DistributionConfig.
func (in *DistributionConfig) DeepCopy() *DistributionConfig {
	if in == nil {
		return nil
	}
	out := new(DistributionConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in Distro) DeepCopyInto(out *Distro) {
	{
		in := &in
		*out = make(Distro, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Distro.
func (in Distro) DeepCopy() Distro {
	if in == nil {
		return nil
	}
	out := new(Distro)
	in.DeepCopyInto(out)
	return *out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GCPStorage) DeepCopyInto(out *GCPStorage) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GCPStorage.
func (in *GCPStorage) DeepCopy() *GCPStorage {
	if in == nil {
		return nil
	}
	out := new(GCPStorage)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OCIRegistry) DeepCopyInto(out *OCIRegistry) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OCIRegistry.
func (in *OCIRegistry) DeepCopy() *OCIRegistry {
	if in == nil {
		return nil
	}
	out := new(OCIRegistry)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Platform) DeepCopyInto(out *Platform) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Platform.
func (in *Platform) DeepCopy() *Platform {
	if in == nil {
		return nil
	}
	out := new(Platform)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in PluginAssociation) DeepCopyInto(out *PluginAssociation) {
	{
		in := &in
		*out = make(PluginAssociation, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PluginAssociation.
func (in PluginAssociation) DeepCopy() PluginAssociation {
	if in == nil {
		return nil
	}
	out := new(PluginAssociation)
	in.DeepCopyInto(out)
	return *out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PluginDescriptor) DeepCopyInto(out *PluginDescriptor) {
	*out = *in
	in.Discovery.DeepCopyInto(&out.Discovery)
	if in.CompletionArgs != nil {
		in, out := &in.CompletionArgs, &out.CompletionArgs
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Aliases != nil {
		in, out := &in.Aliases, &out.Aliases
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	in.PostInstallHook.DeepCopyInto(&out.PostInstallHook)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PluginDescriptor.
func (in *PluginDescriptor) DeepCopy() *PluginDescriptor {
	if in == nil {
		return nil
	}
	out := new(PluginDescriptor)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServerPluginAssociation) DeepCopyInto(out *ServerPluginAssociation) {
	*out = *in
	if in.PluginDescriptors != nil {
		in, out := &in.PluginDescriptors, &out.PluginDescriptors
		*out = make([]*PluginDescriptor, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(PluginDescriptor)
				(*in).DeepCopyInto(*out)
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServerPluginAssociation.
func (in *ServerPluginAssociation) DeepCopy() *ServerPluginAssociation {
	if in == nil {
		return nil
	}
	out := new(ServerPluginAssociation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VersionConstraints) DeepCopyInto(out *VersionConstraints) {
	*out = *in
	if in.SupportedVersions != nil {
		in, out := &in.SupportedVersions, &out.SupportedVersions
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VersionConstraints.
func (in *VersionConstraints) DeepCopy() *VersionConstraints {
	if in == nil {
		return nil
	}
	out := new(VersionConstraints)
	in.DeepCopyInto(out)
	return out
}
