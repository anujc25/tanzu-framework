#@ load("@ytt:overlay", "overlay")
#@ load("@ytt:yaml", "yaml")
#@ load("@ytt:data", "data")

---
apiVersion: cluster.x-k8s.io/v1beta1
kind: ClusterClass
metadata:
  name: tkg-aws-clusterclass
  namespace: default
spec:
  controlPlane:
    ref:
      apiVersion: controlplane.cluster.x-k8s.io/v1beta1
      kind: KubeadmControlPlaneTemplate
      name: tkg-aws-kcp
    machineInfrastructure:
      ref:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: AWSMachineTemplate
        name: tkg-aws-controlplane-template
  workers:
    machineDeployments:
    - class: tkg-worker
      template:
         bootstrap:
           ref:
             apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
             kind: KubeadmConfigTemplate
             name: tkg-aws-bootstrap-template
         infrastructure:
           ref:
             apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
             kind: AWSMachineTemplate
             name: tkg-aws-worker-template
  infrastructure:
     ref:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: AWSClusterTemplate
        name: aws-cluster-template
  variables:
  - name: AWS_REGION
    required: true
    schema:
      openAPIV3Schema:
        type: string
        #@ if data.values.configvalues.AWS_REGION:
        default: #@ data.values.configvalues.AWS_REGION
        #@ end
  - name: AWS_SSH_KEY_NAME
    required: true
    schema:
      openAPIV3Schema:
        type: string
        #@ if data.values.configvalues.AWS_SSH_KEY_NAME:
        default: #@ data.values.configvalues.AWS_SSH_KEY_NAME
        #@ end
  - name: BASTION_HOST_ENABLED
    required: true
    schema:
      openAPIV3Schema:
        type: boolean
        #@ if data.values.configvalues.BASTION_HOST_ENABLED:
        default: true
        #@ end
  - name: AWS_VPC_CIDR
    required: true
    schema:
      openAPIV3Schema:
        type: string
        #@ if data.values.configvalues.AWS_VPC_CIDR:
        default: #@ data.values.configvalues.AWS_VPC_CIDR
        #@ end
  - name: AWS_VPC_ID
    required: true
    schema:
      openAPIV3Schema:
        type: string
        #@ if data.values.configvalues.AWS_VPC_ID:
        default: #@ data.values.configvalues.AWS_VPC_ID
        #@ end
  - name: AWS_NODE_AZ
    required: true
    schema:
      openAPIV3Schema:
        type: string
        #@ if data.values.configvalues.AWS_NODE_AZ:
        default: #@ data.values.configvalues.AWS_NODE_AZ
        #@ end
  - name: AWS_PRIVATE_NODE_CIDR
    required: true
    schema:
      openAPIV3Schema:
        type: string
        #@ if data.values.configvalues.AWS_PRIVATE_NODE_CIDR:
        default: #@ data.values.configvalues.AWS_PRIVATE_NODE_CIDR
        #@ end
  - name: AWS_PRIVATE_SUBNET_ID
    required: true
    schema:
      openAPIV3Schema:
        type: string
        #@ if data.values.configvalues.AWS_PRIVATE_SUBNET_ID:
        default: #@ data.values.configvalues.AWS_PRIVATE_SUBNET_ID
        #@ end
  - name: CONTROL_PLANE_MACHINE_TYPE
    required: true
    schema:
      openAPIV3Schema:
        type: string
        #@ if data.values.configvalues.CONTROL_PLANE_MACHINE_TYPE:
        default: #@ data.values.configvalues.CONTROL_PLANE_MACHINE_TYPE
        #@ end
  - name: NODE_MACHINE_TYPE
    required: true
    schema:
      openAPIV3Schema:
        type: string
        #@ if data.values.configvalues.NODE_MACHINE_TYPE:
        default: #@ data.values.configvalues.NODE_MACHINE_TYPE
        #@ end
  - name: AWS_CONTROL_PLANE_OS_DISK_SIZE_GIB
    required: true
    schema:
      openAPIV3Schema:
        type: integer
        #@ if data.values.configvalues.AWS_CONTROL_PLANE_OS_DISK_SIZE_GIB:
        default: #@ data.values.configvalues.AWS_CONTROL_PLANE_OS_DISK_SIZE_GIB
        #@ end
  - name: AWS_NODE_OS_DISK_SIZE_GIB
    required: true
    schema:
      openAPIV3Schema:
        type: integer
        #@ if data.values.configvalues.AWS_NODE_OS_DISK_SIZE_GIB:
        default: #@ data.values.configvalues.AWS_NODE_OS_DISK_SIZE_GIB
        #@ end
 
  patches:
  - name: AWSCT_main
    definitions:
    - selector:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: AWSClusterTemplate
        matchResources:
          infrastructureCluster: true
      jsonPatches:
      - op: replace
        path: "/spec/template/spec/region"
        valueFrom:
          template: '{{.AWS_REGION}}'
      - op: replace
        path: "/spec/template/spec/sshKeyName"
        valueFrom:
          variable: AWS_SSH_KEY_NAME
      - op: replace
        path: "/spec/template/spec/bastion/enabled"
        valueFrom:
          variable: BASTION_HOST_ENABLED
      - op: replace
        path: "/spec/template/spec/network/vpc"
        valueFrom:
          template: |
            id: {{.AWS_VPC_ID}}
            cidrBlock: {{.AWS_VPC_CIDR}}
      - op: replace
        path: "/spec/template/spec/network/subnets"
        valueFrom:
          template: |
            - availabilityZone: {{.AWS_NODE_AZ}}
              cidrBlock: {{.AWS_PRIVATE_NODE_CIDR}}
              id: {{.AWS_PRIVATE_SUBNET_ID}}
  - name: AWS_MT_controlplane
    definitions:
    - selector:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: AWSMachineTemplate
        matchResources:
          controlPlane: true
      jsonPatches:
      - op: replace
        path: "/spec/template/spec/instanceType"
        valueFrom:
          variable: CONTROL_PLANE_MACHINE_TYPE
      - op: replace
        path: "/spec/template/spec/sshKeyName"
        valueFrom:
          variable: AWS_SSH_KEY_NAME
      - op: replace
        path: "/spec/template/spec/rootVolume/size"
        valueFrom:
          variable: AWS_CONTROL_PLANE_OS_DISK_SIZE_GIB
  - name: AWS_MT_worker
    definitions:
    - selector:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: AWSMachineTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - "tkg-worker"
      jsonPatches:
      - op: replace
        path: "/spec/template/spec/instanceType"
        valueFrom:
          variable: NODE_MACHINE_TYPE
      - op: replace
        path: "/spec/template/spec/sshKeyName"
        valueFrom:
          variable: AWS_SSH_KEY_NAME
      - op: replace
        path: "/spec/template/spec/rootVolume/size"
        valueFrom:
          variable: AWS_NODE_OS_DISK_SIZE_GIB
              
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AWSClusterTemplate
metadata:
  name: aws-cluster-template
  namespace: default
spec:
  template:
    spec:
      region: "${AWS_REGION}"
      sshKeyName: "${AWS_SSH_KEY_NAME}"
      bastion:
        enabled: true
      network:
        vpc:
          cidrBlock: '${AWS_VPC_CIDR}'
          id: '${AWS_VPC_ID}'
        subnets:
          - availabilityZone: '${AWS_NODE_AZ}'
            cidrBlock: '${AWS_PRIVATE_NODE_CIDR}'
            id: '${AWS_PRIVATE_SUBNET_ID}'
---
apiVersion: controlplane.cluster.x-k8s.io/v1beta1
kind: KubeadmControlPlaneTemplate
metadata:
  name: tkg-aws-kcp
  namespace: default
spec:
  template:
    spec:
      kubeadmConfigSpec:
        useExperimentalRetryJoin: true
        clusterConfiguration:
          apiServer:
            timeoutForControlPlane: "8m0s"
            extraArgs:
              cloud-provider: aws
              tls-cipher-suites: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384
          controllerManager:
            extraArgs:
              cloud-provider: aws
              tls-cipher-suites: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
          dns:
            imageRepository: projects-stg.registry.vmware.com/tkg #! TODO '${_TKG_COREDNS_IMAGE_REPOSITORY}' May be a variable for package level 
            imageTag: v1.8.4_vmware.5 #! TODO '${_TKG_COREDNS_IMAGE_TAG}' May be a variable for package level 
          etcd:
            local:
              dataDir: /var/lib/etcd
              imageRepository: projects-stg.registry.vmware.com/tkg #! TODO '${_TKG_ETCD_IMAGE_REPOSITORY}' May be a variable for package level 
              imageTag: v3.5.0_vmware.5 #! TODO '${_TKG_ETCD_IMAGE_TAG}' May be a variable for package level 
              extraArgs:
                cipher-suites: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
          imageRepository: projects-stg.registry.vmware.com/tkg #! TODO '${_TKG_COREDNS_IMAGE_REPOSITORY}' May be a variable for package level
          scheduler:
            extraArgs:
              tls-cipher-suites: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
        initConfiguration:
          nodeRegistration:
            name: '{{ ds.meta_data.local_hostname }}'
            kubeletExtraArgs:
              cloud-provider: aws
              tls-cipher-suites: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
        joinConfiguration:
          nodeRegistration:
            name: '{{ ds.meta_data.local_hostname }}'
            kubeletExtraArgs:
              cloud-provider: aws
              tls-cipher-suites: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
---
kind: AWSMachineTemplate
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
metadata:
  name: tkg-aws-controlplane-template
  namespace: default
spec:
  template:
    spec:
      instanceType: "${CONTROL_PLANE_MACHINE_TYPE}"
      iamInstanceProfile: "control-plane.tkg.cloud.vmware.com"
      sshKeyName: ${AWS_SSH_KEY_NAME}
      ami:
        id: "${AWS_AMI_ID}"
      rootVolume:
        size: 80
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AWSMachineTemplate
metadata:
  name: tkg-aws-worker-template
  namespace: default
spec:
  template:
    spec:
      instanceType: "${NODE_MACHINE_TYPE}"
      iamInstanceProfile: "nodes.tkg.cloud.vmware.com"
      sshKeyName: "${AWS_SSH_KEY_NAME}"
      ami:
        id: "${AWS_AMI_ID}"
      rootVolume:
        size: 80
---
apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
kind: KubeadmConfigTemplate
metadata:
  name: tkg-aws-bootstrap-template
  namespace: default
spec:
  template:
    spec:
      useExperimentalRetryJoin: true
      joinConfiguration:
        nodeRegistration:
          name: '{{ ds.meta_data.local_hostname }}'
          kubeletExtraArgs:
            cloud-provider: aws
            tls-cipher-suites: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
